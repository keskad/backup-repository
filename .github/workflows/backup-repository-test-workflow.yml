name: "Backup Repository Server testing workflow"
on:
    push:
    pull_request:
        branches:
            - master
            - primary

jobs:
    "unit_test_server":
        runs-on: ubuntu-20.04
        steps:
            - name: "Checkout"
              uses: actions/checkout@v1

            # —— Dependencies and environment ————————————————————————————————————
            - name: "Install CI OS dependencies"
              run: "sudo apt-get update; sudo apt-get install libssl-dev libcurl4-openssl-dev python-dev"

            - name: "Install project dependencies"
              run: "sudo pip install -r ./requirements-dev.txt -r ./bahub/requirements.txt -r ./docs/requirements.txt"

            - name: Setup PHP, extensions and composer
              uses: shivammathur/setup-php@v2
              with:
                  php-version: "8.0"
                  extensions: mbstring, ctype, iconv, intl, fileinfo, openssl, filter, iconv, json, mbstring, pdo, pdo_pgsql
                  tools: symfony, composer
              env:
                  update: true

            - name: "Prepare server environment"
              run: "rkd :env:example && rkd :create:keys"
              working-directory: "server"

            - name: "Install server libraries"
              run: "rkd :install --dev"
              working-directory: "server"

            - name: "Run containers required for tests"
              run: "rkd :bahub:env:adapters :server:env:db"

            - name: "Prepare local database for tests"
              run: "rkd :migrate"
              working-directory: "server"

            # —— Tests —————————————————————————————————————————————————————————
            - name: "Server: Unit tests"
              run: "rkd :test:unit"
              if: ${{ always() }}
              working-directory: "server"

            # —— Reports ———————————————————————————————————————————————————————
            - name: Archive server unit tests results as annotations
              uses: EnricoMi/publish-unit-test-result-action@v1
              if: always()
              with:
                  check_name: Server unit tests results
                  files: server/var/tests/unit.junit.xml

            - name: "Make HTML report from server unit tests"
              run: "rkd :test:unit:html"
              if: ${{ always() }}
              working-directory: "server"

            - name: "Archive results"
              uses: actions/upload-artifact@v2
              if: ${{ always() }}
              with:
                  name: tests-results
                  path: server/var/tests

            - name: "Archive logs"
              uses: actions/upload-artifact@v2
              if: ${{ always() }}
              with:
                  name: logs
                  path: server/var/log

            # —— Distribution ———————————————————————————————————————————————————————
            - name: "Build distribution"
              run: "rkd :build:dist-zip :build:swagger-docs"
              working-directory: "server"

            - name: "Archive distribution package"
              uses: actions/upload-artifact@v2
              if: ${{ always() }}
              with:
                  name: backup-repository.dist.tar.gz
                  path: server/var/dist.tar.gz

            - name: "Archive API documentation"
              uses: actions/upload-artifact@v2
              if: ${{ always() }}
              with:
                  name: api-documentation.swagger.json
                  path: server/swagger.json

    "unit_test_bahub":
        runs-on: ubuntu-20.04
        steps:
            - name: "Checkout"
              uses: actions/checkout@v1

            # —— Dependencies and environment ————————————————————————————————————
            - name: "Install CI OS dependencies"
              run: "sudo apt-get update; sudo apt-get install libssl-dev libcurl4-openssl-dev python-dev"

            - name: "Install project dependencies"
              run: "sudo pip install -r ./requirements-dev.txt -r ./bahub/requirements.txt -r ./docs/requirements.txt"

            - name: "Run containers required for tests"
              run: "rkd :bahub:env:adapters :server:env:db"

            - name: "Bahub client: Unit tests"
              run: "rkd :test:unit"
              if: ${{ always() }}
              working-directory: "bahub"

    "release_snapshots":
        needs: ["unit_test_server", "unit_test_bahub"]
        runs-on: ubuntu-20.04
        steps:
            - name: "Checkout"
              uses: actions/checkout@v1

            - name: "Login to quay"
              uses: docker/login-action@v1
              with:
                  registry: quay.io
                  username: ${{ secrets.QUAY_USERNAME }}
                  password: ${{ secrets.QUAY_PASSWORD }}

            - name: "Install build dependencies"
              run: "sudo pip install -r ./requirements-dev.txt"

            - name: "Server: Build docker image"
              run: "rkd :build:docker"
              working-directory: "server"

            - name: "Bahub client: Build docker image"
              run: "rkd :build:docker"
              working-directory: "bahub"

            - name: "Save server docker image to file"
              run: "docker save quay.io/riotkit/backup-repository:latest-dev > server.docker.tar && gzip server.docker.tar"

            - name: "Save bahub docker image to file"
              run: "docker save quay.io/riotkit/bahub:latest-dev > bahub.docker.tar && gzip bahub.docker.tar"

            - name: "Release development dockers"
              run: "docker push quay.io/riotkit/backup-repository:latest-dev && docker push quay.io/riotkit/bahub:latest-dev"

            - name: "Release Bahub to PyPI"
              run: "rkd :py:build :py:publish --username=__token__ --password=${{ secrets.PYPI_BAHUB_TOKEN }} --skip-existing"
              working-directory: "bahub"

            - name: "Store docker images as artifacts"
              uses: actions/upload-artifact@v2
              with:
                  name: docker-images
                  path: |
                      server.docker.tar.gz
                      bahub.docker.tar.gz

    "integration_test":
        needs: release_snapshots
        runs-on: ubuntu-20.04
        steps:
            - name: "Checkout"
              uses: actions/checkout@v1

            - name: "Install build dependencies"
              run: "sudo pip install -r ./requirements-dev.txt"

            - name: Setup PHP, extensions and composer
              uses: shivammathur/setup-php@v2
              with:
                  php-version: "8.0"
                  extensions: mbstring, ctype, iconv, intl, fileinfo, openssl, filter, iconv, json, mbstring, pdo, pdo_pgsql
                  tools: symfony, composer
              env:
                  update: true

            - name: "Retrieve docker images"
              uses: actions/download-artifact@v2
              with:
                  name: docker-images

            - name: "Unzip images"
              run: "gunzip server.docker.tar.gz && gunzip bahub.docker.tar.gz"

            - name: "Load docker images"
              run: "docker load -i server.docker.tar && docker load -i bahub.docker.tar"

            - name: "Setup test environment"
              run: "rkd :run"
              working-directory: "integration-env"

            - name: "Run API tests"
              run: "rkd :install :test --docker"
              if: ${{ always() }}
              working-directory: "api-tests"

            - name: "Dump logs from environment"
              if: ${{ always() }}
              run: "rkd :logs > api-tests.log"
              working-directory: "integration-env"

            - name: "Rebuild test environment"
              run: "rkd :run"
              if: ${{ always() }}
              working-directory: "integration-env"

            - name: "Run E2E tests"
              if: ${{ always() }}
              run: "rkd :install :test --docker --tags='~@docker'"
              working-directory: "e2e"

            - name: "Dump logs from environment"
              if: ${{ always() }}
              run: "rkd :logs > e2e.log"
              working-directory: "integration-env"

            - name: "Store logs from tests execution"
              uses: actions/upload-artifact@v2
              if: ${{ always() }}
              with:
                  name: tests-logs
                  path: |
                    integration-env/*.log
                    integration-env/data/screenshots/*.png
                    server/var/log/*.log

            - name: Archive E2E tests results as annotations
              uses: dorny/test-reporter@v1
              if: always()
              with:
                  name: E2E tests results
                  path: e2e/build/results-xml/default.xml
                  reporter: java-junit

            - name: Archive API tests results as annotations
              uses: EnricoMi/publish-unit-test-result-action@v1
              if: always()
              with:
                  check_name: API tests results
                  files: api-tests/build/api.junit.xml

    "release_dockers":
        needs: integration_test
        runs-on: ubuntu-20.04
        steps:
            - name: "Checkout"
              uses: actions/checkout@v1

            - name: "Login to quay"
              uses: docker/login-action@v1
              with:
                  registry: quay.io
                  username: ${{ secrets.QUAY_USERNAME }}
                  password: ${{ secrets.QUAY_PASSWORD }}

            - name: "Install build dependencies"
              run: "sudo pip install -r ./requirements-dev.txt"

            - name: "Retrieve docker images"
              uses: actions/download-artifact@v2
              with:
                  name: docker-images

            - name: "Unzip images"
              run: "gunzip server.docker.tar.gz && gunzip bahub.docker.tar.gz"

            - name: "Load docker images"
              run: "docker load -i server.docker.tar && docker load -i bahub.docker.tar"

            - name: "Release server docker"
              run: "rkd :release:docker ${{ github.ref }} --push"
              working-directory: "server"

            - name: "Release bahub docker"
              run: "rkd :release:docker ${{ github.ref }} --push"
              working-directory: "bahub"

    "release_dist":
        needs: integration_test
        #if: running from a tag
        runs-on: ubuntu-20.04
        steps:
            - name: "Checkout"
              uses: actions/checkout@v1

            - name: "Install CI OS dependencies"
              run: "sudo apt-get update; sudo apt-get install libssl-dev libcurl4-openssl-dev python-dev"

            - name: "Install project dependencies"
              run: "sudo pip install -r ./requirements-dev.txt -r ./bahub/requirements.txt -r ./docs/requirements.txt"

            - name: "Build manual documentation"
              run: "rkd :build:docs"
              working-directory: "server"

            - name: "Archive manual documentation"
              uses: actions/upload-artifact@v2
              with:
                  name: manual-documentation.zip
                  path: docs/build/html
